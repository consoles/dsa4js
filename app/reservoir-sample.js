// 蓄水池采样算法：
// 场景：
// 1. 从 100000 份调查报告中抽取 1000 份进行统计。
// 2. 从一本很厚的电话簿中抽取 1000 人进行姓氏统计。
// 3. 从 Google 搜索 "Ken Thompson"，从中抽取 100 个结果查看哪些是今年的。

// 既然说到采样问题，最重要的就是做到公平，也就是保证每个元素被采样到的概率是相同的。所以可以想到要想实现这样的算法，就需要掷骰子，也就是随机数算法。
// 对于第一个问题，还是比较简单，通过算法生成 [0,100000−1) 间的随机数 1000 个，并且保证不重复即可。再取出对应的元素即可。
// 但是对于第二和第三个问题，就有些不同了，我们不知道数据的整体规模有多大。可能有人会想到，我可以先对数据进行一次遍历，计算出数据的数量 N，然后再按照上述的方法进行采样即可。这当然可以，但是并不好，毕竟这可能需要花上很多时间。也可以尝试估算数据的规模，但是这样得到的采样数据分布可能并不平均。

// 蓄水池算法适用于对一个不清楚规模的数据集进行采样。以前在某个地方看到过一个面试题，说是从一个字符流中进行采样，最后保留 10 个字符，而并不知道这个流什么时候结束，且须保证每个字符被采样到的几率相同。用的就是这个算法。
// 在高德纳的 TAOCP 中有对于这个算法的描述，可以说这是个很精巧的算法。在看到这个算法实现前，很难想到可以通过这样的一种方式进行采样。

function reservoirSample(n, k) {
  const res = []
  for (let i = 0; i < k; i++) {
    res[i] = i // 前 K 个元素直接放入数组中
  }
  for (let i = k; i < n; i++) {
    // K + 1 个元素开始进行概率采样
    const index = Math.floor(Math.random() * i)
    // 不用担心重复值，因为这个i是自增的
    if (index < k) {
      res[index] = i
    }
  }
  return res
}

const res = reservoirSample(100, 10)

console.log(res)
