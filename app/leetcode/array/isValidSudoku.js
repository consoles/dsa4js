// 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
//
// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

// 数独部分空格内已填入了数字，空白格用 '.' 表示。
//
// 示例 1:
//
// 输入:
//   [
//     ["5","3",".",".","7",".",".",".","."],
//     ["6",".",".","1","9","5",".",".","."],
//     [".","9","8",".",".",".",".","6","."],
//     ["8",".",".",".","6",".",".",".","3"],
//     ["4",".",".","8",".","3",".",".","1"],
//     ["7",".",".",".","2",".",".",".","6"],
//     [".","6",".",".",".",".","2","8","."],
//     [".",".",".","4","1","9",".",".","5"],
//     [".",".",".",".","8",".",".","7","9"]
//   ]
// 输出: true
// 示例 2:
//
// 输入:
//   [
//     ["8","3",".",".","7",".",".",".","."],
//     ["6",".",".","1","9","5",".",".","."],
//     [".","9","8",".",".",".",".","6","."],
//     ["8",".",".",".","6",".",".",".","3"],
//     ["4",".",".","8",".","3",".",".","1"],
//     ["7",".",".",".","2",".",".",".","6"],
//     [".","6",".",".",".",".","2","8","."],
//     [".",".",".","4","1","9",".",".","5"],
//     [".",".",".",".","8",".",".","7","9"]
//   ]
// 输出: false
// 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
//      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
// 说明:
//
//   一个有效的数独（部分已被填充）不一定是可解的。
// 只需要根据以上规则，验证已经填入的数字是否有效即可。
// 给定数独序列只包含数字 1-9 和字符 '.' 。
// 给定数独永远是 9x9 形式的。

/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function (board) {

  // 矩阵数值化
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      board[i][j] = parseInt(board[i][j]) || 0;
    }
  }

  // const set = new Set();
  // for (let i = 0; i < 9; i++) {
  //   set.clear();
  //   // 检查每一行
  //   for (let j = 0; j < 9; j++) {
  //     const item = board[i][j];
  //     if (item === 0) continue;
  //     if (set.has(item) || item < 0 || item > 9) {
  //       return false;
  //     }
  //     set.add(item);
  //   }
  //
  //   set.clear();
  //   // 检查每一列
  //   for (let j = 0; j < 9; j++) {
  //     const item = board[j][i];
  //     if (item === 0) continue;
  //     if (set.has(item) || item < 0 || item > 9) {
  //       return false;
  //     }
  //     set.add(item);
  //   }
  // }
  //
  // set.clear();
  // // 检查每个3*3的小格子
  // for (let x = 0; x < 9; x += 3) {
  //   for (let y = 0; y < 9; y += 3) {
  //     set.clear();
  //     for (let i = 0; i < 3; i++) {
  //       for (let j = 0; j < 3; j++) {
  //         const item = board[x + i][y + j];
  //         if (item === 0) continue;
  //         if (set.has(item) || item < 0 || item > 9) {
  //           return false;
  //         }
  //         set.add(item);
  //       }
  //     }
  //   }
  // }

  const rows = {},
    cols = {},
    boxes = {};

  for (let i = 0; i < 9; i++) {
    rows[i] = {};
    cols[i] = {};
    boxes[i] = {};
  }

  // 只需访问9*9=81次就行了
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      const num = board[i][j];
      if (num === 0) continue;

      // 每一行
      rows[i][num] = rows[i][num] || 0;
      rows[i][num]++;
      if (rows[i][num] > 1) return false;

      // 每一列
      cols[j][num] = cols[j][num] || 0;
      cols[j][num]++;
      if (cols[j][num] > 1) return false;

      // 每个3*3的小格子，可以从左到右从上到下编号为0-8
      const boxIndex = parseInt(i / 3) * 3 + parseInt(j / 3);
      boxes[boxIndex][num] = boxes[boxIndex][num] || 0;
      boxes[boxIndex][num]++;
      if (boxes[boxIndex][num] > 1) return false;
    }
  }

  return true;
};

let board = [
  ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
  ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
  ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
  ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
  ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
  ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
  ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
  ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
  ['.', '.', '.', '.', '8', '.', '.', '7', '9']
];
board = [
  ['8', '3', '.', '.', '7', '.', '.', '.', '.'],
  ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
  ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
  ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
  ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
  ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
  ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
  ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
  ['.', '.', '.', '.', '8', '.', '.', '7', '9']
];
board = [
  ['.', '.', '.', '.', '5', '.', '.', '1', '.'],
  ['.', '4', '.', '3', '.', '.', '.', '.', '.'],
  ['.', '.', '.', '.', '.', '3', '.', '.', '1'],
  ['8', '.', '.', '.', '.', '.', '.', '2', '.'],
  ['.', '.', '2', '.', '7', '.', '.', '.', '.'],
  ['.', '1', '5', '.', '.', '.', '.', '.', '.'],
  ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
  ['.', '2', '.', '9', '.', '.', '.', '.', '.'],
  ['.', '.', '4', '.', '.', '.', '.', '.', '.']
];
let ret = isValidSudoku(board);
console.log(ret);
