// 生日问题。
// 编写一个程序，从命令行接受一个整数 N 作为参数并使用 StdRandom.uniform() 生成一系列 0 到 N - 1 之间的随机整数。
// 通过实验验证产生第一个重复的随机数之前生成的整数数量为 ~Math.sqrt(πN / 2) 。

const _ = require('lodash');

const test = n => {
    const arr = [];
    let count = 0;
    for (let i = 0; i < n; i++) {
        const item = _.random(0, n - 1);
        if (arr.indexOf(item) !== -1) {
            count = i;
            break;
        }
        arr.push(item);
    }
    console.log(`数据集规模:${n} ${count > 0 ? '生成' + count + '数字后重复' : '没有生成重复元素'},`, 'Math.sqrt(πN / 2) =', Math.sqrt(Math.PI * n / 2));
    return count;
}

const n = 1e3;
let sum = 0;
for (let i = 0; i < 20; i++) {
    const count = test(n);
    sum += count;
}
console.log();
console.log(`平均,n = ${n},${sum / 20}后重复,Math.sqrt(πN / 2) = ${Math.sqrt(Math.PI * n / 2)}`);

// 数据集规模: 1000 生成70数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成91数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成33数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成12数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成23数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成45数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成41数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成35数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成22数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成36数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成33数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成102数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成29数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成40数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成42数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成22数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成46数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成45数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成14数字后重复, Math.sqrt(πN / 2) = 39.633272976060105
// 数据集规模: 1000 生成12数字后重复, Math.sqrt(πN / 2) = 39.633272976060105

// 平均, n = 1000, 39.65后重复, Math.sqrt(πN / 2) = 39.633272976060105

