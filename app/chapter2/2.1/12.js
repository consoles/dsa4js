// 2.1.12
// 令希尔排序打印出递增序列的每个元素所带来的比较次数和数组大小的比值。
// 编写一个测试用例对随机 Double 数组进行希尔排序，
// 验证该值是一个小常数，数组大小按照 10 的幂次递增，不小于 100。

const swap = require('../../swap');
const { randomDoubleArray } = require('../../util');

const shellSort = arr => {

    const n = arr.length;

    let counter = {};

    let h = 1;
    const seq = [];
    while (h < n / 3) {
        seq.push(h);
        h = 3 * h + 1;
    }

    // seq 1,4,13,40

    for (let i = seq.length - 1; i >= 0; i--) {
        let h = seq[i];
        counter[h] = 1;
        for (let j = h; j < n; j++) {
            for (let k = j; k >= h && arr[k] < arr[k - h]; k -= h) {
                swap(arr, k, k - h);
                counter[h]++;
            }
        }
    }

    return counter;
};

let n = 10 ** 2;

while (true) {
    const arr = randomDoubleArray(n);
    const counter = shellSort(arr);
    console.log('array size = ', n);
    for (const h in counter) {
        console.log(`h = ${h},比较次数:${counter[h]}，比较次数  / 数组长度  = ${counter[h] / n}`);
    }
    n *= 10;
}

// array size = 100
// h = 1, 比较次数: 215，比较次数 / 数组长度  = 2.15
// h = 4, 比较次数: 155，比较次数 / 数组长度  = 1.55
// h = 13, 比较次数: 206，比较次数 / 数组长度  = 2.06
// array size = 1000
// h = 1, 比较次数: 1795，比较次数 / 数组长度  = 1.795
// h = 4, 比较次数: 2413，比较次数 / 数组长度  = 2.413
// h = 13, 比较次数: 2017，比较次数 / 数组长度  = 2.017
// h = 40, 比较次数: 1760，比较次数 / 数组长度  = 1.76
// h = 121, 比较次数: 1771，比较次数 / 数组长度  = 1.771
// array size = 10000
// h = 1, 比较次数: 18093，比较次数 / 数组长度  = 1.8093
// h = 4, 比较次数: 34346，比较次数 / 数组长度  = 3.4346
// h = 13, 比较次数: 30035，比较次数 / 数组长度  = 3.0035
// h = 40, 比较次数: 27036，比较次数 / 数组长度  = 2.7036
// h = 121, 比较次数: 18990，比较次数 / 数组长度  = 1.899
// h = 364, 比较次数: 14664，比较次数 / 数组长度  = 1.4664
// h = 1093, 比较次数: 9567，比较次数 / 数组长度  = 0.9567
// h = 3280, 比较次数: 5229，比较次数 / 数组长度  = 0.5229
// array size = 100000
// h = 1, 比较次数: 175370，比较次数 / 数组长度  = 1.7537
// h = 4, 比较次数: 372148，比较次数 / 数组长度  = 3.72148
// h = 13, 比较次数: 960651，比较次数 / 数组长度  = 9.60651
// h = 40, 比较次数: 558574，比较次数 / 数组长度  = 5.58574
// h = 121, 比较次数: 377017，比较次数 / 数组长度  = 3.77017
// h = 364, 比较次数: 278232，比较次数 / 数组长度  = 2.78232
// h = 1093, 比较次数: 201347，比较次数 / 数组长度  = 2.01347
// h = 3280, 比较次数: 147706，比较次数 / 数组长度  = 1.47706
// h = 9841, 比较次数: 97224，比较次数 / 数组长度  = 0.97224
// h = 29524, 比较次数: 60982，比较次数 / 数组长度  = 0.60982
// array size = 1000000
// h = 1, 比较次数: 1755250，比较次数 / 数组长度  = 1.75525
// h = 4, 比较次数: 3733505，比较次数 / 数组长度  = 3.733505
// h = 13, 比较次数: 9690706，比较次数 / 数组长度  = 9.690706
// h = 40, 比较次数: 12303702，比较次数 / 数组长度  = 12.303702
// h = 121, 比较次数: 8429165，比较次数 / 数组长度  = 8.429165
// h = 364, 比较次数: 5732591，比较次数 / 数组长度  = 5.732591
// h = 1093, 比较次数: 3967584，比较次数 / 数组长度  = 3.967584
// h = 3280, 比较次数: 2843421，比较次数 / 数组长度  = 2.843421
// h = 9841, 比较次数: 2100210，比较次数 / 数组长度  = 2.10021
// h = 29524, 比较次数: 1529633，比较次数 / 数组长度  = 1.529633
// h = 88573, 比较次数: 1052687，比较次数 / 数组长度  = 1.052687
// h = 265720, 比较次数: 703263，比较次数 / 数组长度  = 0.703263