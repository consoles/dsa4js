// 在最佳、平均和最坏情况下，快排的递归深度分别是多少？这决定了系统为了追踪递归调用所需要的栈的空间的大小。在最坏情况下保证递归深度为数组大小的对数级别的算法的练习请参见练习2.3.20

// 快速排序先将数组分为 （小于枢轴）枢轴（大于枢轴）三部分，然后再分别递归的排序左右两部分数组。
// 在这里，我们可以将快速排序的递归树看作是一棵二叉搜索树（BST, Binary Search Tree）。
// 枢轴作为根结点，左子树即为左数组构造的 BST，右子树即为右数组构造的 BST。
// 这样题目中所求的递归深度即为所构造的 BST 的高度。

// 最坏情况，每次都只有枢轴和大于枢轴两部分，BST 退化为链表，高度为 n−1。数组元素全部相同
// 最好情况，每次枢轴都正好平分数组，构造一棵完全二叉树，高度为 logn。
// 平均情况，问题转化为：一个由 n 个元素随机构造的 BST 的平均高度是多少?结论是lognn
